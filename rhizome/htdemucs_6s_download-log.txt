Downloading: "https://dl.fbaipublicfiles.com/demucs/hybrid_transformer/5c90dfd2-34c22ccb.th" to /home/rhizome884/.cache/
torch/hub/checkpoints/5c90dfd2-34c22ccb.th
100%|███████████████████████████████████████████████████████████████████████████████| 52.4M/52.4M [00:00<00:00, 110MB/s]
HTDemucs(
  (encoder): ModuleList(
    (0): HEncLayer(
      (conv): Conv2d(4, 48, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
      (norm1): Identity()
      (rewrite): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
      (norm2): Identity()
      (dconv): DConv(
        (layers): ModuleList(
          (0): Sequential(
            (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): GroupNorm(1, 6, eps=1e-05, affine=True)
            (2): GELU(approximate='none')
            (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
            (4): GroupNorm(1, 96, eps=1e-05, affine=True)
            (5): GLU(dim=1)
            (6): LayerScale()
          )
          (1): Sequential(
            (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
            (1): GroupNorm(1, 6, eps=1e-05, affine=True)
            (2): GELU(approximate='none')
            (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
            (4): GroupNorm(1, 96, eps=1e-05, affine=True)
            (5): GLU(dim=1)
            (6): LayerScale()
          )
        )
      )
    )
    (1): HEncLayer(
      (conv): Conv2d(48, 96, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
      (norm1): Identity()
      (rewrite): Conv2d(96, 192, kernel_size=(1, 1), stride=(1, 1))
      (norm2): Identity()
      (dconv): DConv(
        (layers): ModuleList(
          (0): Sequential(
            (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): GroupNorm(1, 12, eps=1e-05, affine=True)
            (2): GELU(approximate='none')
            (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
            (4): GroupNorm(1, 192, eps=1e-05, affine=True)
            (5): GLU(dim=1)
            (6): LayerScale()
          )
          (1): Sequential(
            (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
            (1): GroupNorm(1, 12, eps=1e-05, affine=True)
            (2): GELU(approximate='none')
            (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
            (4): GroupNorm(1, 192, eps=1e-05, affine=True)
            (5): GLU(dim=1)
            (6): LayerScale()
          )
        )
      )
    )
    (2): HEncLayer(
      (conv): Conv2d(96, 192, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
      (norm1): Identity()
      (rewrite): Conv2d(192, 384, kernel_size=(1, 1), stride=(1, 1))
      (norm2): Identity()
      (dconv): DConv(
        (layers): ModuleList(
          (0): Sequential(
            (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): GroupNorm(1, 24, eps=1e-05, affine=True)
            (2): GELU(approximate='none')
            (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
            (4): GroupNorm(1, 384, eps=1e-05, affine=True)
            (5): GLU(dim=1)
            (6): LayerScale()
          )
          (1): Sequential(
            (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
            (1): GroupNorm(1, 24, eps=1e-05, affine=True)
            (2): GELU(approximate='none')
            (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
            (4): GroupNorm(1, 384, eps=1e-05, affine=True)
            (5): GLU(dim=1)
            (6): LayerScale()
          )
        )
      )
    )
    (3): HEncLayer(
      (conv): Conv2d(192, 384, kernel_size=(8, 1), stride=(4, 1), padding=(2, 0))
      (norm1): Identity()
      (rewrite): Conv2d(384, 768, kernel_size=(1, 1), stride=(1, 1))
      (norm2): Identity()
      (dconv): DConv(
        (layers): ModuleList(
          (0): Sequential(
            (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): GroupNorm(1, 48, eps=1e-05, affine=True)
            (2): GELU(approximate='none')
            (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
            (4): GroupNorm(1, 768, eps=1e-05, affine=True)
            (5): GLU(dim=1)
            (6): LayerScale()
          )
          (1): Sequential(
            (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
            (1): GroupNorm(1, 48, eps=1e-05, affine=True)
            (2): GELU(approximate='none')
            (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
            (4): GroupNorm(1, 768, eps=1e-05, affine=True)
            (5): GLU(dim=1)
            (6): LayerScale()
          )
        )
      )
    )
  )
  (decoder): ModuleList(
    (0): HDecLayer(
      (conv_tr): ConvTranspose2d(384, 192, kernel_size=(8, 1), stride=(4, 1))
      (norm2): Identity()
      (rewrite): Conv2d(384, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (norm1): Identity()
      (dconv): DConv(
        (layers): ModuleList(
          (0): Sequential(
            (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): GroupNorm(1, 48, eps=1e-05, affine=True)
            (2): GELU(approximate='none')
            (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
            (4): GroupNorm(1, 768, eps=1e-05, affine=True)
            (5): GLU(dim=1)
            (6): LayerScale()
          )
          (1): Sequential(
            (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
            (1): GroupNorm(1, 48, eps=1e-05, affine=True)
            (2): GELU(approximate='none')
            (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
            (4): GroupNorm(1, 768, eps=1e-05, affine=True)
            (5): GLU(dim=1)
            (6): LayerScale()
          )
        )
      )
    )
    (1): HDecLayer(
      (conv_tr): ConvTranspose2d(192, 96, kernel_size=(8, 1), stride=(4, 1))
      (norm2): Identity()
      (rewrite): Conv2d(192, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (norm1): Identity()
      (dconv): DConv(
        (layers): ModuleList(
          (0): Sequential(
            (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): GroupNorm(1, 24, eps=1e-05, affine=True)
            (2): GELU(approximate='none')
            (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
            (4): GroupNorm(1, 384, eps=1e-05, affine=True)
            (5): GLU(dim=1)
            (6): LayerScale()
          )
          (1): Sequential(
            (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
            (1): GroupNorm(1, 24, eps=1e-05, affine=True)
            (2): GELU(approximate='none')
            (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
            (4): GroupNorm(1, 384, eps=1e-05, affine=True)
            (5): GLU(dim=1)
            (6): LayerScale()
          )
        )
      )
    )
    (2): HDecLayer(
      (conv_tr): ConvTranspose2d(96, 48, kernel_size=(8, 1), stride=(4, 1))
      (norm2): Identity()
      (rewrite): Conv2d(96, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (norm1): Identity()
      (dconv): DConv(
        (layers): ModuleList(
          (0): Sequential(
            (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): GroupNorm(1, 12, eps=1e-05, affine=True)
            (2): GELU(approximate='none')
            (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
            (4): GroupNorm(1, 192, eps=1e-05, affine=True)
            (5): GLU(dim=1)
            (6): LayerScale()
          )
          (1): Sequential(
            (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
            (1): GroupNorm(1, 12, eps=1e-05, affine=True)
            (2): GELU(approximate='none')
            (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
            (4): GroupNorm(1, 192, eps=1e-05, affine=True)
            (5): GLU(dim=1)
            (6): LayerScale()
          )
        )
      )
    )
    (3): HDecLayer(
      (conv_tr): ConvTranspose2d(48, 24, kernel_size=(8, 1), stride=(4, 1))
      (norm2): Identity()
      (rewrite): Conv2d(48, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (norm1): Identity()
      (dconv): DConv(
        (layers): ModuleList(
          (0): Sequential(
            (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): GroupNorm(1, 6, eps=1e-05, affine=True)
            (2): GELU(approximate='none')
            (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
            (4): GroupNorm(1, 96, eps=1e-05, affine=True)
            (5): GLU(dim=1)
            (6): LayerScale()
          )
          (1): Sequential(
            (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
            (1): GroupNorm(1, 6, eps=1e-05, affine=True)
            (2): GELU(approximate='none')
            (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
            (4): GroupNorm(1, 96, eps=1e-05, affine=True)
            (5): GLU(dim=1)
            (6): LayerScale()
          )
        )
      )
    )
  )
  (tencoder): ModuleList(
    (0): HEncLayer(
      (conv): Conv1d(2, 48, kernel_size=(8,), stride=(4,), padding=(2,))
      (norm1): Identity()
      (rewrite): Conv1d(48, 96, kernel_size=(1,), stride=(1,))
      (norm2): Identity()
      (dconv): DConv(
        (layers): ModuleList(
          (0): Sequential(
            (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): GroupNorm(1, 6, eps=1e-05, affine=True)
            (2): GELU(approximate='none')
            (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
            (4): GroupNorm(1, 96, eps=1e-05, affine=True)
            (5): GLU(dim=1)
            (6): LayerScale()
          )
          (1): Sequential(
            (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
            (1): GroupNorm(1, 6, eps=1e-05, affine=True)
            (2): GELU(approximate='none')
            (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
            (4): GroupNorm(1, 96, eps=1e-05, affine=True)
            (5): GLU(dim=1)
            (6): LayerScale()
          )
        )
      )
    )
    (1): HEncLayer(
      (conv): Conv1d(48, 96, kernel_size=(8,), stride=(4,), padding=(2,))
      (norm1): Identity()
      (rewrite): Conv1d(96, 192, kernel_size=(1,), stride=(1,))
      (norm2): Identity()
      (dconv): DConv(
        (layers): ModuleList(
          (0): Sequential(
            (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): GroupNorm(1, 12, eps=1e-05, affine=True)
            (2): GELU(approximate='none')
            (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
            (4): GroupNorm(1, 192, eps=1e-05, affine=True)
            (5): GLU(dim=1)
            (6): LayerScale()
          )
          (1): Sequential(
            (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
            (1): GroupNorm(1, 12, eps=1e-05, affine=True)
            (2): GELU(approximate='none')
            (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
            (4): GroupNorm(1, 192, eps=1e-05, affine=True)
            (5): GLU(dim=1)
            (6): LayerScale()
          )
        )
      )
    )
    (2): HEncLayer(
      (conv): Conv1d(96, 192, kernel_size=(8,), stride=(4,), padding=(2,))
      (norm1): Identity()
      (rewrite): Conv1d(192, 384, kernel_size=(1,), stride=(1,))
      (norm2): Identity()
      (dconv): DConv(
        (layers): ModuleList(
          (0): Sequential(
            (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): GroupNorm(1, 24, eps=1e-05, affine=True)
            (2): GELU(approximate='none')
            (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
            (4): GroupNorm(1, 384, eps=1e-05, affine=True)
            (5): GLU(dim=1)
            (6): LayerScale()
          )
          (1): Sequential(
            (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
            (1): GroupNorm(1, 24, eps=1e-05, affine=True)
            (2): GELU(approximate='none')
            (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
            (4): GroupNorm(1, 384, eps=1e-05, affine=True)
            (5): GLU(dim=1)
            (6): LayerScale()
          )
        )
      )
    )
    (3): HEncLayer(
      (conv): Conv1d(192, 384, kernel_size=(8,), stride=(4,), padding=(2,))
      (norm1): Identity()
      (rewrite): Conv1d(384, 768, kernel_size=(1,), stride=(1,))
      (norm2): Identity()
      (dconv): DConv(
        (layers): ModuleList(
          (0): Sequential(
            (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): GroupNorm(1, 48, eps=1e-05, affine=True)
            (2): GELU(approximate='none')
            (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
            (4): GroupNorm(1, 768, eps=1e-05, affine=True)
            (5): GLU(dim=1)
            (6): LayerScale()
          )
          (1): Sequential(
            (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
            (1): GroupNorm(1, 48, eps=1e-05, affine=True)
            (2): GELU(approximate='none')
            (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
            (4): GroupNorm(1, 768, eps=1e-05, affine=True)
            (5): GLU(dim=1)
            (6): LayerScale()
          )
        )
      )
    )
  )
  (tdecoder): ModuleList(
    (0): HDecLayer(
      (conv_tr): ConvTranspose1d(384, 192, kernel_size=(8,), stride=(4,))
      (norm2): Identity()
      (rewrite): Conv1d(384, 768, kernel_size=(3,), stride=(1,), padding=(1,))
      (norm1): Identity()
      (dconv): DConv(
        (layers): ModuleList(
          (0): Sequential(
            (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): GroupNorm(1, 48, eps=1e-05, affine=True)
            (2): GELU(approximate='none')
            (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
            (4): GroupNorm(1, 768, eps=1e-05, affine=True)
            (5): GLU(dim=1)
            (6): LayerScale()
          )
          (1): Sequential(
            (0): Conv1d(384, 48, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
            (1): GroupNorm(1, 48, eps=1e-05, affine=True)
            (2): GELU(approximate='none')
            (3): Conv1d(48, 768, kernel_size=(1,), stride=(1,))
            (4): GroupNorm(1, 768, eps=1e-05, affine=True)
            (5): GLU(dim=1)
            (6): LayerScale()
          )
        )
      )
    )
    (1): HDecLayer(
      (conv_tr): ConvTranspose1d(192, 96, kernel_size=(8,), stride=(4,))
      (norm2): Identity()
      (rewrite): Conv1d(192, 384, kernel_size=(3,), stride=(1,), padding=(1,))
      (norm1): Identity()
      (dconv): DConv(
        (layers): ModuleList(
          (0): Sequential(
            (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): GroupNorm(1, 24, eps=1e-05, affine=True)
            (2): GELU(approximate='none')
            (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
            (4): GroupNorm(1, 384, eps=1e-05, affine=True)
            (5): GLU(dim=1)
            (6): LayerScale()
          )
          (1): Sequential(
            (0): Conv1d(192, 24, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
            (1): GroupNorm(1, 24, eps=1e-05, affine=True)
            (2): GELU(approximate='none')
            (3): Conv1d(24, 384, kernel_size=(1,), stride=(1,))
            (4): GroupNorm(1, 384, eps=1e-05, affine=True)
            (5): GLU(dim=1)
            (6): LayerScale()
          )
        )
      )
    )
    (2): HDecLayer(
      (conv_tr): ConvTranspose1d(96, 48, kernel_size=(8,), stride=(4,))
      (norm2): Identity()
      (rewrite): Conv1d(96, 192, kernel_size=(3,), stride=(1,), padding=(1,))
      (norm1): Identity()
      (dconv): DConv(
        (layers): ModuleList(
          (0): Sequential(
            (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): GroupNorm(1, 12, eps=1e-05, affine=True)
            (2): GELU(approximate='none')
            (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
            (4): GroupNorm(1, 192, eps=1e-05, affine=True)
            (5): GLU(dim=1)
            (6): LayerScale()
          )
          (1): Sequential(
            (0): Conv1d(96, 12, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
            (1): GroupNorm(1, 12, eps=1e-05, affine=True)
            (2): GELU(approximate='none')
            (3): Conv1d(12, 192, kernel_size=(1,), stride=(1,))
            (4): GroupNorm(1, 192, eps=1e-05, affine=True)
            (5): GLU(dim=1)
            (6): LayerScale()
          )
        )
      )
    )
    (3): HDecLayer(
      (conv_tr): ConvTranspose1d(48, 12, kernel_size=(8,), stride=(4,))
      (norm2): Identity()
      (rewrite): Conv1d(48, 96, kernel_size=(3,), stride=(1,), padding=(1,))
      (norm1): Identity()
      (dconv): DConv(
        (layers): ModuleList(
          (0): Sequential(
            (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): GroupNorm(1, 6, eps=1e-05, affine=True)
            (2): GELU(approximate='none')
            (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
            (4): GroupNorm(1, 96, eps=1e-05, affine=True)
            (5): GLU(dim=1)
            (6): LayerScale()
          )
          (1): Sequential(
            (0): Conv1d(48, 6, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
            (1): GroupNorm(1, 6, eps=1e-05, affine=True)
            (2): GELU(approximate='none')
            (3): Conv1d(6, 96, kernel_size=(1,), stride=(1,))
            (4): GroupNorm(1, 96, eps=1e-05, affine=True)
            (5): GLU(dim=1)
            (6): LayerScale()
          )
        )
      )
    )
  )
  (freq_emb): ScaledEmbedding(
    (embedding): Embedding(512, 48)
  )
  (crosstransformer): CrossTransformerEncoder(
    (norm_in): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
    (norm_in_t): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
    (layers): ModuleList(
      (0): MyTransformerEncoderLayer(
        (self_attn): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=384, out_features=384, bias=True)
        )
        (linear1): Linear(in_features=384, out_features=1536, bias=True)
        (dropout): Dropout(p=0.02, inplace=False)
        (linear2): Linear(in_features=1536, out_features=384, bias=True)
        (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (dropout1): Dropout(p=0.02, inplace=False)
        (dropout2): Dropout(p=0.02, inplace=False)
        (norm_out): MyGroupNorm(1, 384, eps=1e-05, affine=True)
        (gamma_1): LayerScale()
        (gamma_2): LayerScale()
      )
      (1): CrossTransformerEncoderLayer(
        (cross_attn): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=384, out_features=384, bias=True)
        )
        (linear1): Linear(in_features=384, out_features=1536, bias=True)
        (dropout): Dropout(p=0.02, inplace=False)
        (linear2): Linear(in_features=1536, out_features=384, bias=True)
        (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (norm3): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (norm_out): MyGroupNorm(1, 384, eps=1e-05, affine=True)
        (gamma_1): LayerScale()
        (gamma_2): LayerScale()
        (dropout1): Dropout(p=0.02, inplace=False)
        (dropout2): Dropout(p=0.02, inplace=False)
      )
      (2): MyTransformerEncoderLayer(
        (self_attn): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=384, out_features=384, bias=True)
        )
        (linear1): Linear(in_features=384, out_features=1536, bias=True)
        (dropout): Dropout(p=0.02, inplace=False)
        (linear2): Linear(in_features=1536, out_features=384, bias=True)
        (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (dropout1): Dropout(p=0.02, inplace=False)
        (dropout2): Dropout(p=0.02, inplace=False)
        (norm_out): MyGroupNorm(1, 384, eps=1e-05, affine=True)
        (gamma_1): LayerScale()
        (gamma_2): LayerScale()
      )
      (3): CrossTransformerEncoderLayer(
        (cross_attn): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=384, out_features=384, bias=True)
        )
        (linear1): Linear(in_features=384, out_features=1536, bias=True)
        (dropout): Dropout(p=0.02, inplace=False)
        (linear2): Linear(in_features=1536, out_features=384, bias=True)
        (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (norm3): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (norm_out): MyGroupNorm(1, 384, eps=1e-05, affine=True)
        (gamma_1): LayerScale()
        (gamma_2): LayerScale()
        (dropout1): Dropout(p=0.02, inplace=False)
        (dropout2): Dropout(p=0.02, inplace=False)
      )
      (4): MyTransformerEncoderLayer(
        (self_attn): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=384, out_features=384, bias=True)
        )
        (linear1): Linear(in_features=384, out_features=1536, bias=True)
        (dropout): Dropout(p=0.02, inplace=False)
        (linear2): Linear(in_features=1536, out_features=384, bias=True)
        (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (dropout1): Dropout(p=0.02, inplace=False)
        (dropout2): Dropout(p=0.02, inplace=False)
        (norm_out): MyGroupNorm(1, 384, eps=1e-05, affine=True)
        (gamma_1): LayerScale()
        (gamma_2): LayerScale()
      )
    )
    (layers_t): ModuleList(
      (0): MyTransformerEncoderLayer(
        (self_attn): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=384, out_features=384, bias=True)
        )
        (linear1): Linear(in_features=384, out_features=1536, bias=True)
        (dropout): Dropout(p=0.02, inplace=False)
        (linear2): Linear(in_features=1536, out_features=384, bias=True)
        (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (dropout1): Dropout(p=0.02, inplace=False)
        (dropout2): Dropout(p=0.02, inplace=False)
        (norm_out): MyGroupNorm(1, 384, eps=1e-05, affine=True)
        (gamma_1): LayerScale()
        (gamma_2): LayerScale()
      )
      (1): CrossTransformerEncoderLayer(
        (cross_attn): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=384, out_features=384, bias=True)
        )
        (linear1): Linear(in_features=384, out_features=1536, bias=True)
        (dropout): Dropout(p=0.02, inplace=False)
        (linear2): Linear(in_features=1536, out_features=384, bias=True)
        (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (norm3): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (norm_out): MyGroupNorm(1, 384, eps=1e-05, affine=True)
        (gamma_1): LayerScale()
        (gamma_2): LayerScale()
        (dropout1): Dropout(p=0.02, inplace=False)
        (dropout2): Dropout(p=0.02, inplace=False)
      )
      (2): MyTransformerEncoderLayer(
        (self_attn): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=384, out_features=384, bias=True)
        )
        (linear1): Linear(in_features=384, out_features=1536, bias=True)
        (dropout): Dropout(p=0.02, inplace=False)
        (linear2): Linear(in_features=1536, out_features=384, bias=True)
        (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (dropout1): Dropout(p=0.02, inplace=False)
        (dropout2): Dropout(p=0.02, inplace=False)
        (norm_out): MyGroupNorm(1, 384, eps=1e-05, affine=True)
        (gamma_1): LayerScale()
        (gamma_2): LayerScale()
      )
      (3): CrossTransformerEncoderLayer(
        (cross_attn): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=384, out_features=384, bias=True)
        )
        (linear1): Linear(in_features=384, out_features=1536, bias=True)
        (dropout): Dropout(p=0.02, inplace=False)
        (linear2): Linear(in_features=1536, out_features=384, bias=True)
        (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (norm3): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (norm_out): MyGroupNorm(1, 384, eps=1e-05, affine=True)
        (gamma_1): LayerScale()
        (gamma_2): LayerScale()
        (dropout1): Dropout(p=0.02, inplace=False)
        (dropout2): Dropout(p=0.02, inplace=False)
      )
      (4): MyTransformerEncoderLayer(
        (self_attn): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=384, out_features=384, bias=True)
        )
        (linear1): Linear(in_features=384, out_features=1536, bias=True)
        (dropout): Dropout(p=0.02, inplace=False)
        (linear2): Linear(in_features=1536, out_features=384, bias=True)
        (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (dropout1): Dropout(p=0.02, inplace=False)
        (dropout2): Dropout(p=0.02, inplace=False)
        (norm_out): MyGroupNorm(1, 384, eps=1e-05, affine=True)
        (gamma_1): LayerScale()
        (gamma_2): LayerScale()
      )
    )
  )
)

[Process exited 0]
